ARG ONEAPI_VERSION=2025.1.3-0

# ============================================================================
# BUILD STAGE - Install build dependencies and create wheels
# ============================================================================
FROM intel/deep-learning-essentials:${ONEAPI_VERSION}-devel-rockylinux9 AS builder

ARG ONEAPI_VERSION=2025.1.3-0
ARG PYTHON_VERSION
ARG VLLM_VERSION=v0.10.1

WORKDIR /workspace

ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    UV_LINK_MODE=copy \
    PYTHON_VERSION=${PYTHON_VERSION:-3.12} \
    VIRTUAL_ENV=/opt/vllm \
    SYCL_PI_LEVEL_ZERO_USE_IMMEDIATE_COMMANDLISTS=1 \
    SYCL_CACHE_PERSISTENT=1 \
    VLLM_TARGET_DEVICE=xpu

# Install base packages and EPEL in single layer
RUN dnf install -y dnf-plugins-core && \
    dnf config-manager --enable crb && \
    dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \
    dnf config-manager --set-enabled epel && \
    dnf install -y --allowerasing \
        python${PYTHON_VERSION} python${PYTHON_VERSION}-pip python${PYTHON_VERSION}-wheel \
        python${PYTHON_VERSION}-devel \
        python3.9-devel \
        which procps findutils tar \
        gcc gcc-c++ \
        make cmake \
        autoconf automake libtool \
        git \
        curl wget \
        gzip \
        zlib-devel \
        openssl-devel \
        pkg-config \
        libuuid-devel \
        glibc-devel \
        rdma-core-devel \
        numactl-libs \
        subunit \
        pciutils \
        pciutils-libs \
        ninja-build \
        gh \
    && dnf clean all

# Setup Python virtual environment
RUN python${PYTHON_VERSION} -m venv /opt/vllm && \
    ${VIRTUAL_ENV}/bin/pip install --no-cache -U pip wheel uv meson-python ninja pybind11 build

# Pin torch, so all deps are built against the same version 
# as vllm itself
RUN --mount=type=cache,target=/root/.cache/uv \
  source ${VIRTUAL_ENV}/bin/activate && \
  uv pip install \
    # global
    numpy \ 
    # nixl 
    pyyaml \
    types-PyYAML \
    pytest \ 
    patchelf>=0.11.0

RUN mkdir -p /wheels

# Use existing virtual environment at /opt/vllm
WORKDIR /workspace/


# Create wheels directory
# Copy patches before build
COPY patches/ /tmp/patches/

# Clone vLLM and build for XPU following official documentation
RUN --mount=type=cache,target=/var/cache/git \
    --mount=type=bind,source=.git,target=.git \
    git clone https://github.com/vllm-project/vllm.git && \
    cd vllm && \
    git checkout ${VLLM_VERSION} && \
    git apply /tmp/patches/0001-Add-the-xpu-torch-version.patch && \
    git apply /tmp/patches/0001-Add-XPU-support-to-Nixl-connector.patch && \
    source ${VIRTUAL_ENV}/bin/activate && \
    pip install -v -r requirements/xpu.txt && \
    export VLLM_TARGET_DEVICE=xpu && \
    python setup.py install && \
    cd /workspace && rm -rf vllm

# ============================================================================
# RUNTIME STAGE - Minimal runtime image
# ============================================================================
FROM intel/deep-learning-essentials:${ONEAPI_VERSION}-devel-rockylinux9 AS runtime

ARG PYTHON_VERSION

ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    UV_LINK_MODE=copy \
    PYTHON_VERSION=${PYTHON_VERSION:-3.12} \
    VIRTUAL_ENV=/opt/vllm \
    SYCL_PI_LEVEL_ZERO_USE_IMMEDIATE_COMMANDLISTS=1 \
    SYCL_CACHE_PERSISTENT=1 \
    VLLM_TARGET_DEVICE=xpu

# Install only runtime dependencies
RUN dnf install -y --allowerasing \
        python${PYTHON_VERSION} python${PYTHON_VERSION}-pip python${PYTHON_VERSION}-devel \
        rdma-core-devel \
        numactl-libs \
        pciutils \
        procps-ng \
        git \
        curl && \ 
        dnf clean all


# Copy the complete virtual environment from builder
COPY --from=builder /opt/vllm /opt/vllm

RUN dnf remove -y git && dnf autoremove -y && dnf clean all

# setup non-root user for OpenShift
RUN umask 002 && \
    useradd --uid 2000 --gid 0 vllm && \
    rm -rf /home/vllm && \
    mkdir -p /home/vllm && \
    chown vllm:root /home/vllm && \
    chmod g+rwx /home/vllm


ENV PATH="${VIRTUAL_ENV}/bin:${PATH}" \
    HOME=/home/vllm \
    VLLM_USAGE_SOURCE=production-docker-image \
    TRITON_XPU_PROFILE=1


USER 2000
WORKDIR /home/vllm

ENTRYPOINT ["python", "-m", "vllm.entrypoints.openai.api_server"]
