multinode: false

accelerator:
  type: cpu

modelArtifacts:
  uri: "hf://meta-llama/Llama-3.2-3B-Instruct"
  size: 100Gi
  authSecretName: "llm-d-hf-token"
  name: "meta-llama/Llama-3.2-3B-Instruct"

routing:
  servicePort: 8000
  parentRefs:
    - group: gateway.networking.k8s.io
      kind: Gateway
      # name: infra-pd-inference-gateway # set in helmfile

  proxy:
    image: ghcr.io/llm-d/llm-d-routing-sidecar:v0.2.0
    imagePullPolicy: IfNotPresent
    connector: nixlv2
    secure: false

  inferencePool:
    create: false
    # name: gaie-pd # set in helmfile

  httpRoute:
    create: false

  epp:
    create: false

decode:
  create: true
  replicas: 1
  monitoring:
    podmonitor:
      enabled: false
      portName: "metrics" # decode vLLM service port (from routing.proxy.targetPort)
      path: "/metrics"
      interval: "30s"
  containers:
  - name: vllm
    image: docker.io/library/vllm-cpu-env:latest
    imagePullPolicy: IfNotPresent
    securityContext:
      privileged: true
    command: ["/bin/bash", "-c"]
    args:
      - |
          VLLM_SKIP_WARMUP=True vllm serve meta-llama/Llama-3.2-3B-Instruct \
          --port 8200 \
          --gpu-memory-utilization 0.9 \
          --enforce-eager \
          --disable-hybrid-kv-cache-manager \
          --tensor-parallel-size 1 --max_model_len 4096 --kv-transfer-config '{"kv_connector":"NixlConnector","kv_role":"kv_both","kv_buffer_device":"cpu"}'
    env:
      - name: OMP_NUM_THREADS
        value: "64"
      - name: LD_LIBRARY_PATH
        value: "/usr/lib/nixl_ofi:/usr/local/lib:/usr/lib:/opt/amazon/openmpi/lib:/usr/lib/habanalabs"
      - name: VLLM_NIXL_SIDE_CHANNEL_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
    ports:
      - containerPort: 8200
        name: metrics
        protocol: TCP
    resources:
      limits:
        cpu: "64"
        memory: 64G
      requests:
        cpu: "64"
        memory: 64G
    device: "cpu"
    mountModelVolume: true
    volumeMounts:
      - name: metrics-volume
        mountPath: /.config
      - name: shm
        mountPath: /dev/shm
      - name: torch-compile-cache
        mountPath: /.cache
  volumes:
    - name: metrics-volume
      emptyDir: {}
    - name: shm
      emptyDir:
        medium: Memory
        sizeLimit: "100Gi"
    - name: torch-compile-cache
      emptyDir: {}

prefill:
  create: true
  replicas: 1
  #monitoring:
    podmonitor:
      enabled: false
      portName: "metrics" # decode vLLM service port (from routing.proxy.targetPort)
      path: "/metrics"
      interval: "30s"
  containers:
  - name: vllm
    image: docker.io/library/vllm-cpu-env:latest
    imagePullPolicy: IfNotPresent
    securityContext:
      privileged: true
    command: ["/bin/bash", "-c"]
    args:
      - |
        VLLM_SKIP_WARMUP=True vllm serve meta-llama/Llama-3.2-3B-Instruct \
          --port 8000 \
          --gpu-memory-utilization 0.9 \
          --enforce-eager \
          --disable-hybrid-kv-cache-manager \
          --tensor-parallel-size 1 --max_model_len 4096 --kv-transfer-config '{"kv_connector":"NixlConnector","kv_role":"kv_both","kv_buffer_device":"cpu"}'
    env:
      - name: OMP_NUM_THREADS
        value: "64"
      - name: LD_LIBRARY_PATH
        value: "/usr/lib/nixl_ofi:/usr/local/lib:/usr/lib:/opt/amazon/openmpi/lib:/usr/lib/habanalabs"
      - name: VLLM_NIXL_SIDE_CHANNEL_HOST
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
    ports:
      - containerPort: 8000
        name: metrics
        protocol: TCP
    resources:
      limits:
        cpu: "64"
        memory: 64G
      requests:
        cpu: "64"
        memory: 64G
    device: "cpu"
    mountModelVolume: true
    volumeMounts:
      - name: metrics-volume
        mountPath: /.config
      - name: shm
        mountPath: /dev/shm
      - name: torch-compile-cache
        mountPath: /.cache
  volumes:
    - name: metrics-volume
      emptyDir: {}
    - name: shm
      emptyDir:
        medium: Memory
        sizeLimit: "100Gi"
    - name: torch-compile-cache
      emptyDir: {}


